<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
{
  player_colour = choose(-1, 1);
  player_wins = 0;
  computer_wins = 0;
  mcts_type = MctsType(
    connect4_generate_state,
    connect4_generate_moves,
    connect4_apply_move,
    connect4_final_playout,
    connect4_serialize,
    connect4_deserialize,
    undefined
  );
  ellipsis_animate = 0;
  ellipsis_animate_speed = 3/room_speed;
  event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allocate time for the AI if it's the computer's turn
{
  if (state[42] != player_colour &amp;&amp; is_undefined(game_outcome) &amp;&amp; !global.animating) {
    // Give half the step's length or the total allowed evaluation time, whichever is less
    var time_slice = min((1000/room_speed)/2, global.mcts_time);
    // Initialize the MCTS AI if it isn't set up yet
    if (is_undefined(mcts_tree)) {
      mcts_tree = MctsTree(mcts_type, state,
        connect4_select,
        connect4_expand,
        connect4_playout,
        connect4_tentative_playout,
        connect4_reweight,
        connect4_interpret_playout
      );
    }
    // Expand the MctsTree just one bit and record the time spent
    mcts_tree_evaluate(mcts_tree, time_slice, time_slice);
    mcts_time_elapsed += time_slice;
    // Advance the animated ellipsis
    ellipsis_animate += ellipsis_animate_speed;
    if (ellipsis_animate &gt;= 4) {
      ellipsis_animate -= 4;
    }
    // If the time's up, make the best move available
    if (mcts_time_elapsed &gt; global.mcts_time) {
      var best_move = mcts_tree_get_best_move(mcts_tree);
      connect4_apply_move(state, best_move);
      // Find where the piece will end up
      var vertical_offset = 0,
          state_offset = best_move;
      while (state[state_offset] == 0 &amp;&amp; state_offset &lt; 42) {
        vertical_offset++;
        state_offset += 7;
      }
      // Create the piece on the board as a visual
      if (player_colour == 1) {
        colour_instances[best_move+7*vertical_offset] = instance_create(395+35+70*best_move, 150+35+70*vertical_offset, obj_red);
      }
      else {
        colour_instances[best_move+7*vertical_offset] = instance_create(395+35+70*best_move, 150+35+70*vertical_offset, obj_yellow);
      }
      // Reset the MCTS AI
      mcts_time_elapsed = 0;
      mcts_tree[@MCTS_TREE.ROOT] = undefined;
      mcts_tree = undefined;
      ellipsis_animate = 0;
      // Check for wins
      event_user(1);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play a sound and animate colours if the game is done (i.e. game finished and all animations are settled)
{
  if (!(game_done || is_undefined(game_outcome) || global.animating)) {
    // Play the right sound and increment score
    if (game_outcome[0] == 0) {
      audio_play_sound(snd_draw, 1, false);
    }
    else if (game_outcome[0] == player_colour) {
      audio_play_sound(snd_win, 1, false);
      player_wins++;
    }
    else {
      audio_play_sound(snd_lose, 1, false);
      computer_wins++;
    }
    // Animate pieces if someone won
    if (game_outcome[0] != 0) {
      // Animate them
      for (var i = 1; i &lt;= 4; i++) {
        with (colour_instances[game_outcome[i]]) event_user(1);
      }
    }
    // Mark game as done
    game_done = true;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Accept plays from the player
{
  if (state[42] == player_colour &amp;&amp; is_undefined(game_outcome) &amp;&amp; !global.animating) {
    var cellx = (mouse_x-395) div 70;
    // Don't accept input outside the board
    if (cellx &gt;= 0 &amp;&amp; cellx &lt;= 6 &amp;&amp; mouse_y &gt;= 150 &amp;&amp; mouse_y &lt;= 570) {
      var move = cellx;
      // Accept legal moves only
      if (connect4_apply_move(state, move)) {
        // Find where the piece will end up
        var vertical_offset = 0,
            state_offset = move;
        while (state[state_offset] == 0 &amp;&amp; state_offset &lt; 42) {
          vertical_offset++;
          state_offset += 7;
        }
        // Add the right piece to the board as a visual
        if (player_colour == 1) {
          colour_instances[move+7*vertical_offset] = instance_create(395+35+70*move, 150+35+70*vertical_offset, obj_yellow);
        }
        else {
          colour_instances[move+7*vertical_offset] = instance_create(395+35+70*move, 150+35+70*vertical_offset, obj_red);
        }
        // Check for wins
        event_user(1);
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Let the player restart the game if it's done by clicking the board
{
  if (game_done) {
    if (mouse_x &gt;= 395 &amp;&amp; mouse_x &lt;= 395+70*7 &amp;&amp; mouse_y &gt;= 150 &amp;&amp; mouse_y &lt;= 150+70*6) {
      event_user(0);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check wins
{
  game_outcome = connect4_final_playout(state);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate new game
{
  // Remove old visuals
  with (pobj_board_piece) instance_destroy();
  // Start new board
  state[42] = choose(-1, 1);
  for (var i = 0; i &lt; 42; i++) {
    state[i] = 0;
    colour_instances[i] = noone;
  }
  game_outcome = undefined;
  game_done = false;
  mcts_tree = undefined;
  mcts_time_elapsed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free the MCTS tree
{
  if (!is_undefined(mcts_tree)) {
    mcts_tree[@MCTS_TREE.ROOT] = undefined;
    mcts_tree = undefined;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw text
{
  // Setup
  draw_set_halign(fa_center);
  draw_set_font(fnt_text);
  draw_set_colour($c7c7c7);
  
  // Player
  draw_text(192, 192, "Player");
  draw_text(192, 192+64, string(player_wins));
  if (player_colour == 1) {
    draw_sprite(spr_yellow, 0, 192, 192+64+150);
  }
  else {
    draw_sprite(spr_red, 0, 192, 192+64+150);
  }
  // Draw status only if no animations are going on
  if (!global.animating) {
    if (is_undefined(game_outcome)) {
      if (player_colour == state[42]) {
        draw_text(192, 192+64+160+100, "Your move");
      }
    }
    else {
      if (game_outcome[0] == 0) {
        draw_text(192, 192+64+160+100, "DRAW");
      }
      else if (game_outcome[0] == player_colour) {
        draw_text(192, 192+64+160+100, "WINNER");
      }
      else {
        draw_text(192, 192+64+160+100, "LOSER");
      }
    }
  }
  // Computer
  draw_text(room_width-192, 192, "Computer");
  draw_text(room_width-192, 192+64, string(computer_wins));
  if (player_colour == 1) {
    draw_sprite(spr_red, 0, room_width-192, 192+64+150);
  }
  else {
    draw_sprite(spr_yellow, 0, room_width-192, 192+64+150);
  }
  // Draw status only if no animations are going on
  if (!global.animating) {
    if (is_undefined(game_outcome)) {
      if (player_colour != state[42]) {
        draw_text(room_width-192, 192+64+160+100, "Thinking" + string_repeat(".", round(ellipsis_animate)));
      }
    }
    else {
      if (game_outcome[0] == 0) {
        draw_text(room_width-192, 192+64+160+100, "DRAW");
      }
      else if (game_outcome[0] != player_colour) {
        draw_text(room_width-192, 192+64+160+100, "WINNER");
      }
      else {
        draw_text(room_width-192, 192+64+160+100, "LOSER");
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
